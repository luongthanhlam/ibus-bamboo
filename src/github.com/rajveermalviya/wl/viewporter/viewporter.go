// generated by wl-scanner
// https://github.com/rajveermalviya/wl-scanner
// from: https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/d10d18f3d49374d2e3eb96d63511f32795aab5f7/stable/viewporter/viewporter.xml
// on 2021-03-10 03:11:09 +0530

package viewporter

import "github.com/rajveermalviya/wl"

type WpViewporter struct {
	wl.BaseProxy
}

func NewWpViewporter(ctx *wl.Context) *WpViewporter {
	ret := &WpViewporter{}
	ctx.Register(ret)
	return ret
}

// Destroy will unbind from the cropping and scaling interface.
//
//
// Informs the server that the client will not be using this
// protocol object anymore. This does not affect any other objects,
// wp_viewport objects included.
//
func (p *WpViewporter) Destroy() error {
	return p.Context().SendRequest(p, 0)
}

// GetViewport will extend surface interface for crop and scale.
//
//
// Instantiate an interface extension for the given wl_surface to
// crop and scale its content. If the given wl_surface already has
// a wp_viewport object associated, the viewport_exists
// protocol error is raised.
//
func (p *WpViewporter) GetViewport(surface *wl.Surface) (*WpViewport, error) {
	ret := NewWpViewport(p.Context())
	return ret, p.Context().SendRequest(p, 1, wl.Proxy(ret), surface)
}

const (
	WpViewporterErrorViewportExists = 0
)

type WpViewport struct {
	wl.BaseProxy
}

func NewWpViewport(ctx *wl.Context) *WpViewport {
	ret := &WpViewport{}
	ctx.Register(ret)
	return ret
}

// Destroy will remove scaling and cropping from the surface.
//
//
// The associated wl_surface's crop and scale state is removed.
// The change is applied on the next wl_surface.commit.
//
func (p *WpViewport) Destroy() error {
	return p.Context().SendRequest(p, 0)
}

// SetSource will set the source rectangle for cropping.
//
//
// Set the source rectangle of the associated wl_surface. See
// wp_viewport for the description, and relation to the wl_buffer
// size.
//
// If all of x, y, width and height are -1.0, the source rectangle is
// unset instead. Any other set of values where width or height are zero
// or negative, or x or y are negative, raise the bad_value protocol
// error.
//
// The crop and scale state is double-buffered state, and will be
// applied on the next wl_surface.commit.
//
func (p *WpViewport) SetSource(x, y, width, height float32) error {
	return p.Context().SendRequest(p, 1, x, y, width, height)
}

// SetDestination will set the surface size for scaling.
//
//
// Set the destination size of the associated wl_surface. See
// wp_viewport for the description, and relation to the wl_buffer
// size.
//
// If width is -1 and height is -1, the destination size is unset
// instead. Any other pair of values for width and height that
// contains zero or negative values raises the bad_value protocol
// error.
//
// The crop and scale state is double-buffered state, and will be
// applied on the next wl_surface.commit.
//
func (p *WpViewport) SetDestination(width, height int32) error {
	return p.Context().SendRequest(p, 2, width, height)
}

const (
	WpViewportErrorBadValue    = 0
	WpViewportErrorBadSize     = 1
	WpViewportErrorOutOfBuffer = 2
	WpViewportErrorNoSurface   = 3
)
